# This code is part of Tergite
#
# (C) Copyright Chalmers Next Labs 2024
# (C) Copyright Michele Faucci Giannelli 2025
#
# This code is licensed under the Apache License, Version 2.0. You may
# obtain a copy of this license in the LICENSE.txt file in the root directory
# of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.
#
# Any modifications or derivative works of this code must retain this
# copyright notice, and modified files need to carry a notice indicating
# that they have been altered from the originals.


stages:
  - setup
  - tests
  - lint
  - build_documentation
  - application_run
  - application_run_coupler
  - browser_run

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTHON_VERSION: "3.12"
  REDIS_PORT: 6378

default:
  tags:
    - docker


setup:
  stage: setup
  image: python:${PYTHON_VERSION}
  script:
    # Create and activate a virtual environment
    - python -m venv venv
    - source venv/bin/activate
    # Install project dependencies
    - pip install --upgrade pip
    - pip install .
    - pip install pytest black==24.10.0 requests-mock==1.11.0 pylint pytest-cov
  cache:
    - key: "default"
      paths:
        - .cache/pip
    - key: "venv-${CI_COMMIT_REF_NAME}"
      paths:
        - venv

tests:
  stage: tests
  image: python:${PYTHON_VERSION}
  needs:
    - setup
  script:
    # Install dependencies
    - apt-get update
    - apt-get install redis ffmpeg libsm6 libxext6 -y
    # Run Redis server
    - redis-server --daemonize yes --port "$REDIS_PORT"
    # Activate the virtual environment
    - source venv/bin/activate
    # Run tests
    - pytest tergite_autocalibration --cov=tergite_autocalibration --cov-report xml --cov-report term-missing --junitxml=report.xml
  coverage: '/TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  cache:
    - key: "default"
      paths:
        - .cache/pip
    - key: "venv-${CI_COMMIT_REF_NAME}"
      paths:
        - venv

build_documentation:
  stage: build_documentation
  image: python:${PYTHON_VERSION}
  needs:
    - setup
  script:
    # Activate the virtual environment
    - source venv/bin/activate
    # Install documentation dependencies
    - pip install '.[docs]'
    # Build the documentation with strict mode to catch warnings and errors
    - mkdocs build --strict
  cache:
    - key: "default"
      paths:
        - .cache/pip
    - key: "venv-${CI_COMMIT_REF_NAME}"
      paths:
        - venv

lint:
  stage: lint
  image: python:${PYTHON_VERSION}
  needs:
    - setup
  script:
    # Activate the virtual environment
    - source venv/bin/activate
    # Run linter and make it fail under 7.0
    - pylint tergite_autocalibration --fail-under=7.0
    # Run formatter
    - black --check tergite_autocalibration
  cache:
    - key: "default"
      paths:
        - .cache/pip
    - key: "venv-${CI_COMMIT_REF_NAME}"
      paths:
        - venv

application_run:
  stage: application_run
  image: python:${PYTHON_VERSION}
  needs:
    - setup
    - tests
  script:
    # Install dependencies
    - apt-get update
    - apt-get install redis ffmpeg libsm6 libxext6 -y
    # Run Redis server
    - redis-server --daemonize yes --port "$REDIS_PORT"
    # Activate the virtual environment
    - source venv/bin/activate
    # Create empty .env file
    - touch .env
    # Load configuration
    - echo "y" | acli config load -t fc8a
    # Reset Redis
    - echo "y" | acli node reset -a
    # Clear the caches
    - rm -r venv/lib/python3.12/site-packages/out
    # Run the calibration chain
    - echo "n" | acli start -r "$CI_PROJECT_DIR/tergite_autocalibration/tests/fixtures/data/16-51-33_standard_run_ro_amplitude_three_state_optimization-SUCCESS" -n resonator_spectroscopy
    - echo "n" | acli start -r "$CI_PROJECT_DIR/tergite_autocalibration/tests/fixtures/data/16-51-33_standard_run_ro_amplitude_three_state_optimization-SUCCESS" -n qubit_01_spectroscopy
    - echo "n" | acli start -r "$CI_PROJECT_DIR/tergite_autocalibration/tests/fixtures/data/16-51-33_standard_run_ro_amplitude_three_state_optimization-SUCCESS" -n rabi_oscillations
    - echo "n" | acli start -r "$CI_PROJECT_DIR/tergite_autocalibration/tests/fixtures/data/16-51-33_standard_run_ro_amplitude_three_state_optimization-SUCCESS" -n ramsey_correction
    - echo "n" | acli start -r "$CI_PROJECT_DIR/tergite_autocalibration/tests/fixtures/data/16-51-33_standard_run_ro_amplitude_three_state_optimization-SUCCESS" -n motzoi_parameter
    - echo "n" | acli start -r "$CI_PROJECT_DIR/tergite_autocalibration/tests/fixtures/data/16-51-33_standard_run_ro_amplitude_three_state_optimization-SUCCESS" -n n_rabi_oscillations
    - echo "n" | acli start -r "$CI_PROJECT_DIR/tergite_autocalibration/tests/fixtures/data/16-51-33_standard_run_ro_amplitude_three_state_optimization-SUCCESS" -n resonator_spectroscopy_1
    - echo "n" | acli start -r "$CI_PROJECT_DIR/tergite_autocalibration/tests/fixtures/data/16-51-33_standard_run_ro_amplitude_three_state_optimization-SUCCESS" -n qubit_12_spectroscopy
    - echo "n" | acli start -r "$CI_PROJECT_DIR/tergite_autocalibration/tests/fixtures/data/16-51-33_standard_run_ro_amplitude_three_state_optimization-SUCCESS" -n rabi_oscillations_12
    - echo "n" | acli start -r "$CI_PROJECT_DIR/tergite_autocalibration/tests/fixtures/data/16-51-33_standard_run_ro_amplitude_three_state_optimization-SUCCESS" -n ramsey_correction_12
    - echo "n" | acli start -r "$CI_PROJECT_DIR/tergite_autocalibration/tests/fixtures/data/16-51-33_standard_run_ro_amplitude_three_state_optimization-SUCCESS" -n motzoi_parameter_12
    - echo "n" | acli start -r "$CI_PROJECT_DIR/tergite_autocalibration/tests/fixtures/data/16-51-33_standard_run_ro_amplitude_three_state_optimization-SUCCESS" -n n_rabi_oscillations_12
    - echo "n" | acli start -r "$CI_PROJECT_DIR/tergite_autocalibration/tests/fixtures/data/16-51-33_standard_run_ro_amplitude_three_state_optimization-SUCCESS" -n resonator_spectroscopy_2
    - echo "n" | acli start -r "$CI_PROJECT_DIR/tergite_autocalibration/tests/fixtures/data/16-51-33_standard_run_ro_amplitude_three_state_optimization-SUCCESS" -n ro_frequency_three_state_optimization
    - echo "n" | acli start -r "$CI_PROJECT_DIR/tergite_autocalibration/tests/fixtures/data/16-51-33_standard_run_ro_amplitude_three_state_optimization-SUCCESS" -n ro_amplitude_three_state_optimization
    # Read
    - ls -lR venv/lib/python3.12/site-packages/out
    # Delay to encounter for the race condition
    - sleep 5
    # Verify output
    - |
      if find venv/lib/python3.12/site-packages/out -type f | grep -q "ro_amplitude_three_state_optimization.png"; then
        echo "Output file $OUTPUT_FILE exists. Application ran successfully."
      else
        echo "Error: Output file $OUTPUT_FILE not found."
        exit 1
      fi
  cache:
    - key: "default"
      paths:
        - .cache/pip
    - key: "venv-${CI_COMMIT_REF_NAME}"
      paths:
        - venv

application_run_coupler:
  stage: application_run_coupler
  image: python:${PYTHON_VERSION}
  needs:
    - setup
    - tests
  script:
    # Install dependencies
    - apt-get update
    - apt-get install redis ffmpeg libsm6 libxext6 -y
    # Run Redis server
    - redis-server --daemonize yes --port "$REDIS_PORT"
    # Activate the virtual environment
    - source venv/bin/activate
    # Create empty .env file
    - touch .env
    # Load configuration
    - echo "y" | acli config load -t fc8a
    # Reset Redis
    - echo "y" | acli node reset -a
    # Clear the caches
    - rm -r venv/lib/python3.12/site-packages/out
    # Run the calibration chain
    - echo "n" | acli start -r "$CI_PROJECT_DIR/tergite_autocalibration/tests/fixtures/data/01-44-14_simple_coupler_run-SUCCESS" -n resonator_spectroscopy_vs_current
    - echo "n" | acli start -r "$CI_PROJECT_DIR/tergite_autocalibration/tests/fixtures/data/01-44-14_simple_coupler_run-SUCCESS" -n qubit_spectroscopy_vs_current
    # Read
    - ls venv/lib/python3.12/site-packages/out
    - echo "Listing all files under 'out':"
    - find venv/lib/python3.12/site-packages/out -type f -name "*.png"
    # Verify output
    - |
      if find venv/lib/python3.12/site-packages/out -type f | grep -q "qubit_spectroscopy_vs_current.png"; then
        echo "Output file $OUTPUT_FILE exists. Application ran successfully."
      else
        echo "Error: Output file $OUTPUT_FILE not found."
        exit 1
      fi
      if find venv/lib/python3.12/site-packages/out -type f | grep -q "qubit_spectroscopy_vs_current_q14_q15_q15_spectroscopies.png"; then
        echo "Output file $OUTPUT_FILE exists. Application ran successfully."
      else
        echo "Error: Output file $OUTPUT_FILE not found."
        exit 1
      fi
  cache:
    - key: "default"
      paths:
        - .cache/pip
    - key: "venv-${CI_COMMIT_REF_NAME}"
      paths:
        - venv

browser_run:
  stage: browser_run
  image: python:${PYTHON_VERSION}
  needs:
    - setup
    - tests
  script:
    # Activate the virtual environment
    - source venv/bin/activate
    # Copy the .env file
    - cp .example.env .env
    # Load configuration
    - echo "y" | acli config load -t fc8a
    # Start the data browser
    - acli browser start
    # Poll and check whether the data browser is online
    - |
      retry_count=0
      max_retries=5
      retry_delay=5

      check_data_browser() {
        curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8179 | grep -q 200
      }

      sleep 5

      while [ $retry_count -lt $max_retries ]; do
        if check_data_browser; then
          echo "Data browser is running on port 8179"
          exit 0
        else
          echo "Data browser is not running on port 8179"
          retry_count=$((retry_count + 1))
          if [ $retry_count -lt $max_retries ]; then
            sleep $retry_delay
          fi
        fi
      done

      echo "Max retries reached. Exiting."
      exit 1
    # Stop the browser again
    - acli browser stop
  cache:
    - key: "default"
      paths:
        - .cache/pip
    - key: "venv-${CI_COMMIT_REF_NAME}"
      paths:
        - venv
