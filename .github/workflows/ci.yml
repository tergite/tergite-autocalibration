name: CI

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.9" ]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install project
        run: poetry install --no-interaction
      - name: Lint
        if: ${{ vars.SHOULD_LINT == 'true' }}
        run: |
          source .venv/bin/activate
          black tergite_autocalibration --check
      - name: Smoke test
        run: |
          source .venv/bin/activate
          acli --help

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: tests
    steps:
      - name: Checkout the commit
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install project
        run: poetry install --no-interaction
      - name: Deploy docs
        if: ${{ vars.SHOULD_PUBLISH_DOCS == 'true' }}
        run: |
          source .venv/bin/activate
          mkdocs gh-deploy --force
      - name: Publish to Test pypi
        if: ${{ vars.SHOULD_PUBLISH_TO_STAGING == 'true' }}
        run: |
          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry config pypi-token.test-pypi ${{ secrets.TEST_PYPI_API_TOKEN }}
          poetry publish --build -r test-pypi
      - name: Publish to pypi
        if: ${{ vars.SHOULD_PUBLISH_TO_PROD == 'true' }}
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
          poetry publish --build

  upstream:
    name: Update upstream
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }} && ${{ vars.SHOULD_PUSH_UPSTREAM == 'true' }}
    needs: tests
    steps:
      - name: Checkout the commit
        uses: actions/checkout@v3

      - name: Push upstream
        run: |
          git config user.email ${{ secrets.UPSTREAM_USER }}
          git fetch ${{ secrets.UPSTREAM_REPO }} ${{ secrets.UPSTREAM_BRANCH }}:${{ secrets.UPSTREAM_BRANCH }} || echo "${{ secrets.UPSTREAM_BRANCH }} does not exist"
          git checkout ${{ github.ref_name }} || echo "${{ github.ref_name }} does not exist"
          git rebase ${{ secrets.UPSTREAM_BRANCH }} || echo "errors rebasing to branch: ${{ secrets.UPSTREAM_BRANCH }}"
          git push ${{ secrets.UPSTREAM_REPO }} ${{ github.ref_name }}:${{ secrets.UPSTREAM_BRANCH }} || echo "${{ secrets.UPSTREAM_BRANCH }} already exists"
