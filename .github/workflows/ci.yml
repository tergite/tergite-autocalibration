name: CI

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.10" ]

    services:
      redis:
        image: redis
        ports:
          - 6378:6379 # to map to the testing port host:container

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install OpenBlas for scipy if no wheels
        run: sudo apt-get install -y libopenblas-dev
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python --version
          pip install ."[test,dev]"
      - name: Lint
        if: ${{ vars.SHOULD_LINT == 'true' }}
        run: black tergite_autocalibration --check
      - name: Run tests
        run: pytest tergite_autocalibration

  release:
    name: Release
    runs-on: ubuntu-latest
    if: |
      startsWith(github.ref, 'refs/tags/') || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.job == 'release')
    needs: tests
    steps:
      - name: Checkout the commit
        uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          cd $GITHUB_WORKSPACE
          python -m pip install --upgrade pip
          python --version
          pip install .
          pip install build twine
      - name: Deploy docs
        if: ${{ vars.SHOULD_PUBLISH_DOCS == 'true' }}
        run: |
          source .venv/bin/activate
          mkdocs gh-deploy --force
      - name: Build
        run: python -m build
      - name: Publish to Test pypi
        if: ${{ vars.SHOULD_PUBLISH_TO_STAGING == 'true' }}
        run: |
          twine upload --skip-existing \
            -u __token__ \
            -p ${{ secrets.TEST_PYPI_API_TOKEN }} \
            -r https://test.pypi.org/legacy/ dist/*;
      - name: Publish to pypi
        if: ${{ vars.SHOULD_PUBLISH_TO_PROD == 'true' }}
        run: |
          twine upload --skip-existing \
            -u __token__ \
            -p ${{ secrets.PYPI_API_TOKEN }} dist/*;

  upstream:
    name: Update upstream
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && vars.SHOULD_PUSH_UPSTREAM == 'true' }}
    needs: tests
    steps:
      - name: Checkout the commit
        uses: actions/checkout@v3

      - name: Push upstream
        run: |
          if [ "${{ github.event_name }}" != "push" ] || [ "${{ vars.SHOULD_PUSH_UPSTREAM }}" != 'true' ]; then printf "upstream not enabled"; exit; fi
          git config user.email ${{ secrets.UPSTREAM_USER }}
          git fetch ${{ secrets.UPSTREAM_REPO }} ${{ secrets.UPSTREAM_BRANCH }}:${{ secrets.UPSTREAM_BRANCH }} || echo "${{ secrets.UPSTREAM_BRANCH }} does not exist"
          git checkout ${{ github.ref_name }} || echo "${{ github.ref_name }} does not exist"
          git rebase ${{ secrets.UPSTREAM_BRANCH }} || echo "errors rebasing to branch: ${{ secrets.UPSTREAM_BRANCH }}"
          git push ${{ secrets.UPSTREAM_REPO }} ${{ github.ref_name }}:${{ secrets.UPSTREAM_BRANCH }} || echo "${{ secrets.UPSTREAM_BRANCH }} already exists"
